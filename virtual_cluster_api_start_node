#!/bin/bash

source /home/centos/demo_rc_file.sh
readarray -t api_parameters_array < /usr/local/bin/virtual_cluster_config_file
flavor_name=${api_parameters_array[0]}
image_name=${api_parameters_array[1]}
network_name=${api_parameters_array[2]}
security_group_name=${api_parameters_array[3]}
key_name=${api_parameters_array[4]}
instance_name=${api_parameters_array[5]}
volume_string="volume_"
volume_name=$volume_string$instance_name
#SSH_KEY_PATH=

#Start new instance and get VM id
VM_id=$(openstack server create --flavor "$flavor_name" --image "$image_name" --nic net-id="$network_name" --security-group "$security_group_name" --key-name "$key_name" "$instance_name" | grep "^| id" | awk '{print $4}')
echo "VM ID: " $VM_id

#Check if VM is active and can be used (ping is established)
active=0
ping=0
ssh=0

while true; do
	vm_status=$(openstack server show $VM_id | grep "status" | awk '{print $4}')
	if [[ $vm_status == "BUILD" ]]; then
		active=0
		echo "VM state is " $vm_status 
		sleep 30
	elif [[ $vm_status == "ACTIVE" ]]; then
		active=1
		echo "VM is active"
		break	
	elif [[ $vm_status == "ERROR" ]]; then
		echo "VM is in state error and will be deleted"
		openstack server delete $VM_id
		break
	else
		echo "Unknown error occured"
		exit 1; 
	fi
done

if [[ $active == 1 ]]; then
	ping_counter=0
	ip_address=$(openstack server show $VM_id | grep addresses | awk '{print $4}' | awk -F = '{print $2}')
	echo "IP address: " $ip_address
	while true; do	
		if ping_bool $ip_address; then
			ping=1
			echo "Ping is established"
			break
		else 
			if [[ $ping_counter == 36 ]]; then
				echo "Ping could not been established, VM will be deleted"
				openstack server delete $VM_id
				exit 1;
			else
				echo "Waiting for ping"
				ping_counter=$((ping_counter+1))	
				sleep 10
			fi
		fi	
	done
fi

if [[ $active == 1 && $ping == 1 ]]; then
	ssh_counter=0
	while true; do
		ssh_check=$(nmap $ip_address -PN -p ssh | grep -c open)
		if [[ $ssh_counter == 18 ]]; then
			echo "Ping could not been established, VM will be deleted"
                	openstack server delete $VM_id
           		exit 1;
		else
			if [[ $ssh_check == 1 ]]; then
				ssh=1
				echo "SSH connection is working"
				break
			else
				echo "Waiting for SSH connection"
				ssh_counter=$((ssh_counter+1))
				sleep 20
			fi
		fi
	done	
fi

if [[ $ssh == 1 ]]; then
	echo "VM is ready"
	volume_id=$(openstack volume create --size 1 "$volume_name" | grep "^| id" | awk '{print $4}') 
	openstack server add volume --device /dev/vdb $VM_id $volume_id
	sleep 10
	ssh -n -o StrictHostKeyChecking=no -i $SSH_KEY_PATH centos@$ip_address sudo mkfs.xfs /dev/vdb
	ssh -n -o StrictHostKeyChecking=no -i $SSH_KEY_PATH centos@$ip_address sudo mount /dev/vdb /mnt/
	ssh -n -o StrictHostKeyChecking=no -i $SSH_KEY_PATH centos@$ip_address sudo chmod 777 /mnt/
fi
